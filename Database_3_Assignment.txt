// There is a file name EPL_matches.csv. This line of code loads the csv file into the projects of neo4j

LOAD CSV WITH HEADERS FROM "file:///EPL_matches.csv" AS row


//This line is used to create season node with the year. The property of year is takem from Season

MERGE (sea:Season {year: row.Season})


//It creates a node Game_Match with Properties like (Outcome,
//fullteam_gome_goals,full_team_away_goals and all. It is extracted from //the csv file provided by the university.

CREATE (mth:Game_Match {outcome: row.FTR, full_team_home_goals: toInteger(row.FTHG), Full_team_away_goals: toInteger(row.FTAG),half_time_home_goals: toInteger(row.HTHG), half_ay_goals: toInteger(row.HTAG), half_time_reult: row.HTR})

//It creates the relationship between nodes which are: Season and //Game_Match indicating math to spedific season

CREATE (sea)-[:SEASON_IN]->(mth)


//It creates Regree node with name taken property from the refree
//It defines the relationship between refree and game_mathc with its //officiated match refree

MERGE (re:Referee{name:row.Referee})<-[:Match_Refereed]-(mth)


//Creating home team node using the names of team in EPL from the given CSV //file

//Creating away team node using the names of team in EPL from the given CSV //file

CREATE (ht:Team {name: row.HomeTeam})
CREATE (at:Team {name: row.AwayTeam})

//creating the relationship between game_match and the team node from the //given CSV File

CREATE (mth)-[:Team_match_home]->(ht)
CREATE (mth)-[:Team_match_away]->(at)

//1 
//This code extract every team names from all matches and display it
//this code return every team names from the league
MATCH (t:Team)<-[:Team_match_home|Team_match_away]-(mth:Game_Match)
RETURN DISTINCT t.name AS Team 
 
//2
//This code extract all the information about the history of match between
//Liverpool and Man United since the 2010-11
//it returns the match score with its goal and date match was played
//union is used to return the accurate data from given CSV file

MATCH (l:Team {name: "Liverpool"})<-[:Team_match_home]-(mth:Game_Match)-[:Team_match_away]->(u:Team {name: "Man United"})
MATCH (sea)-[:SEASON_IN]->(mth:Game_Match) 
WHERE sea.year >= '2010-11' AND mth.outcome = "H"
RETURN l.name AS Home_Team, mth.full_team_home_goals AS HomeGoals, u.name AS Away_Team, mth.Full_team_away_goals AS Away_Goals, sea.year AS Season
UNION ALL
MATCH (l:Team {name: "Man United"})<-[:Team_match_home]-(mth:Game_Match)-[:Team_match_away]->(u:Team {name: "Liverpool"})
MATCH (sea)-[:SEASON_IN]->(mth:Game_Match) 
WHERE sea.year >= '2010-11' AND mth.outcome = "A"
RETURN l.name AS Home_Team, mth.full_team_home_goals AS HomeGoals, u.name AS Away_Team, mth.Full_team_away_goals AS Away_Goals, sea.year AS Season


//3

//It line the relationship between refree and match_refreed
//with varaible mth and re
MATCH (re:Referee)<-[:Match_Refereed]-(mth:Game_Match)

//This Line filters out refrees who have refreed atleast one match
WHERE NOT (re)-[:Match_Refereed]->(:Game_Match)<-[:Match_Refereed]-(re)

//This code defines relationship wih season_in
//there are sea and mth varaible used

MATCH (sea:Season)-[:SEASON_IN]->(mth)
WHERE sea.year >= '2000'

//It returns the needed data that has asked in question
WITH re.name AS referee_name, count(mth) AS games_count
RETURN referee_name, SUM(games_count) AS Matches_Refereed

//It display with descending order based with limit of 5
ORDER BY Matches_Refereed DESC
LIMIT 5

//4

//it specify year between two different nodes and create a realtionship
MATCH (sea:Season {year: '2020-21'})-[:SEASON_IN]->(mth:Game_Match)
//it shows the relatioship between nodes
MATCH (mth)-[:Team_match_home|Team_match_away]->(t:Team)

//It determines the goals scored by the team
WITH
  t.name AS TeamName,
  CASE
    WHEN (mth)-[:Team_match_home]->(t) THEN mth.full_team_home_goals
    ELSE mth.Full_team_away_goals
  END AS GoalsScored,
  CASE
    WHEN (mth)-[:Team_match_home]->(t) THEN mth.Full_team_away_goals
    ELSE mth.full_team_home_goals
  END AS GoalsConceded

//It returns the som of goals scored with the teamName
RETURN
  TeamName,
  SUM(GoalsScored) AS Goals_Scored,
  SUM(GoalsConceded) AS Goals_Conceded

//output is ordered by descending order
ORDER BY
  Goals_Scored DESC;

//5

//it matches the realtion between two nodes
MATCH (sea:Season)-[:SEASON_IN]->(mth:Game_Match)

//It matches a relationship between nodes.
//The mth and h varaiable is used

MATCH (mth)-[:Team_match_home]->(h:Team)

//It filters the year that is greater to 2000

WHERE sea.year >= '2000'

//It asign the property of nodes and varaiables 
WITH h.name AS team, mth.full_team_home_goals AS goals, mth.outcome AS outcome

//it filters the outcome
WHERE outcome = 'H'

//it returns the values
RETURN team, COUNT(*) AS home_wins, SUM(goals) AS home_goals

//it returns tha value in descending order and limit is 1
ORDER BY home_wins DESC, home_goals DESC
LIMIT 1

//6

//it defines the connectivity of nodes With year property of 2020-2021
MATCH (t:Team)-[:Team_match_home|Team_match_away]-(mth:Game_Match)<-[:SEASON_IN]-(:Season {year: '2020-21'})

//It filters the data with the following validations
WHERE ((t)-[:Team_match_home]-(mth) AND mth.outcome = 'A') OR ((t)-[:Team_match_away]-(mth) AND mth.outcome = 'H')

//It spefies the losses
WITH t.name AS Team_Name, COUNT(*) AS Losses

//it returns the team name and the totl looses
RETURN Team_Name, Losses

//It gives the outcome in descending order with limit 1
ORDER BY Losses DESC
LIMIT 1;

7//
//This code sshow the realtionship 
MATCH (t:Team)-[:Team_match_home|Team_match_away]-(mth:Game_Match)<-[:SEASON_IN]-(sea:Season {year: "2020-21"})

//this look for conditions and give the outcome
WHERE mth.half_time_reult = 'A' AND mth.outcome = 'H'

//it returns the name
RETURN DISTINCT t.name

//8

//it marches node and variable and filters greater than 2000
MATCH (sea:Season)
WHERE sea.year >= '2000'

//it schoes relationship with the connted node

MATCH (sea)-[:SEASON_IN]-(mth:Game_Match)
MATCH (mth)-[:Team_match_home|Team_match_away]-(t:Team)
WITH t.name AS Team_Name, SUM(CASE
//It calculates the points earned by the each team in the league
    WHEN (mth)-[:Team_match_home]-(t) THEN
      CASE
        WHEN mth.outcome = 'H' THEN 3
        WHEN mth.outcome = 'D' THEN 1
        ELSE 0
      END
    WHEN (mth)-[:Team_match_away]-(t) THEN
      CASE
        WHEN mth.outcome = 'A' THEN 3
        WHEN mth.outcome = 'D' THEN 1
        ELSE 0
      END
  END) AS Points
//it returns the data and order it in descending form with limit 1
RETURN Team_Name, Points
ORDER BY Points DESC
LIMIT 1;

//9
//It shoes the porperty equal to 2020-2021
MATCH (sea:Season {year: '2020-21'})-[:SEASON_IN]->(mth:Game_Match)
MATCH (mth)-[:Team_match_home|Team_match_away]-(t:Team)
WITH
//t varaiable represents team node
  t.name AS TeamName,

//it displays the points assigned based on the outcome of the matches
  CASE
    WHEN (mth)-[:Team_match_home]-(t) THEN mth.full_team_home_goals
    ELSE mth.Full_team_away_goals
  END AS GoalsScored,
  CASE
    WHEN (mth)-[:Team_match_home]-(t) THEN mth.Full_team_away_goals
    ELSE mth.full_team_home_goals
  END AS GoalsConceded,
  CASE
    WHEN (mth.outcome = 'H' AND (mth)-[:Team_match_home]-(t)) OR (mth.outcome = 'A' AND (mth)-[:Team_match_away]-(t)) THEN 3
    WHEN mth.outcome = 'D' THEN 1
    ELSE 0
  END AS Points

//it calculates the total sum of goal scored
WITH TeamName, SUM(GoalsScored) AS GoalsScored, SUM(GoalsConceded) AS GoalsConceded, SUM(Points) AS TotalPoints
ORDER BY TotalPoints DESC, GoalsScored - GoalsConceded DESC, GoalsScored DESC
//it returns the data needed
RETURN Team_Name, Goals_Scored, Goals_Conceded, Total_Points;